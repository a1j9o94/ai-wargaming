// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  games           Game[] // Games this user has participated in
  messages        ChatMessage[] // Messages sent by this user
  GameParticipant GameParticipant[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Game Models
model Game {
  id           String            @id @default(cuid())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  currentRound Int               @default(1)
  phase        String // SETUP, PROPOSAL, DISCUSSION, VOTING, RESOLVE, COMPLETED
  participants GameParticipant[]
  proposals    Proposal[]
  discussions  Discussion[]
  logEntries   LogEntry[]
  host         User?             @relation(fields: [hostId], references: [id])
  hostId       String?
  winner       GameParticipant?  @relation("GameWinner", fields: [winnerId], references: [id])
  winnerId     String?

  @@index([winnerId])
}

model GameParticipant {
  id                        String     @id @default(cuid())
  game                      Game       @relation(fields: [gameId], references: [id])
  gameId                    String
  user                      User?      @relation(fields: [userId], references: [id])
  userId                    String?
  civilization              String
  might                     Int        @default(80)
  economy                   Int        @default(80)
  publicObjective           Objective? @relation("PublicObjective")
  privateObjective          Objective? @relation("PrivateObjective")
  remainingProposals        Int        @default(2)
  isAI                      Boolean    @default(false)
  hasAcknowledgedCompletion Boolean    @default(false)

  // Proposals and votes
  createdProposals  Proposal[]            @relation("CreatedProposals")
  receivedProposals ProposalParticipant[]
  votes             Vote[]

  // Discussions
  participatedDiscussions Discussion[] @relation("DiscussionParticipants")

  // Log entries visible to this participant
  visibleLogEntries LogEntry[]    @relation("LogVisibility")
  ChatMessage       ChatMessage[]

  // Games won
  wonGames Game[] @relation("GameWinner")

  @@unique([gameId, userId])
}

model Objective {
  id                  String  @id @default(cuid())
  description         String
  isPublic            Boolean
  targetMight         Int?
  targetEconomy       Int?
  targetParticipantId String?
  type                String // TRADE_DEAL, MILITARY_ALLIANCE, SABOTAGE, ECONOMIC_GROWTH, MILITARY_GROWTH
  status              String  @default("PENDING") // PENDING, COMPLETED, FAILED

  // Relations
  publicFor    GameParticipant? @relation("PublicObjective", fields: [publicForId], references: [id])
  publicForId  String?          @unique
  privateFor   GameParticipant? @relation("PrivateObjective", fields: [privateForId], references: [id])
  privateForId String?          @unique
}

model Proposal {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  game        Game     @relation(fields: [gameId], references: [id])
  gameId      String
  roundNumber Int
  description String
  type        String // TRADE, MILITARY, ALLIANCE
  isPublic    Boolean
  status      String   @default("PENDING") // PENDING, ACCEPTED, REJECTED

  // Relations
  creator      GameParticipant       @relation("CreatedProposals", fields: [creatorId], references: [id])
  creatorId    String
  participants ProposalParticipant[] @relation("ProposalParticipants")
  targets      ProposalParticipant[] @relation("ProposalTargets")
  votes        Vote[]
}

// Join table for proposal participants and targets
model ProposalParticipant {
  proposal      Proposal        @relation("ProposalParticipants", fields: [proposalId], references: [id])
  proposalId    String
  participant   GameParticipant @relation(fields: [participantId], references: [id])
  participantId String
  role          String // "CREATOR", "PARTICIPANT", or "TARGET"

  // For target relationships
  targetProposal   Proposal? @relation("ProposalTargets", fields: [targetProposalId], references: [id])
  targetProposalId String?

  @@id([proposalId, participantId])
}

model Vote {
  id            String          @id @default(cuid())
  proposal      Proposal        @relation(fields: [proposalId], references: [id])
  proposalId    String
  participant   GameParticipant @relation(fields: [participantId], references: [id])
  participantId String
  support       Boolean

  @@unique([proposalId, participantId])
}

model Discussion {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String

  // Relations
  participants GameParticipant[] @relation("DiscussionParticipants")
  messages     ChatMessage[]
}

model ChatMessage {
  id           String          @id @default(cuid())
  createdAt    DateTime        @default(now())
  content      String
  discussion   Discussion      @relation(fields: [discussionId], references: [id])
  discussionId String
  sender       GameParticipant @relation(fields: [senderId], references: [id])
  senderId     String
  User         User?           @relation(fields: [userId], references: [id])
  userId       String?
}

model LogEntry {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  game      Game              @relation(fields: [gameId], references: [id])
  gameId    String
  time      String
  event     String
  isPublic  Boolean           @default(true) // If false, only visible to visibleTo players
  visibleTo GameParticipant[] @relation("LogVisibility")

  @@index([gameId])
}
